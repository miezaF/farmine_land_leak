generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique(map: "name") @db.VarChar(32)
  password            String                @db.Char(40)
  secret              String?               @db.Char(16)
  type                Int                   @default(1)
  premium_ends_at     Int                   @default(0) @db.UnsignedInt
  email               String                @default("") @db.VarChar(255)
  creation            Int                   @default(0)
  premium_points      Int                   @default(0)
  premdays            Int
  wallet              String?               @db.VarChar(255)
  alpha_key           String?               @db.VarChar(255)
  account_ban_history account_ban_history[]
  account_bans        account_bans?
  account_storage     account_storage[]
  account_viplist     account_viplist[]
  players             Player[]

  @@map("accounts")
}

model Player {
  id                                                       Int                      @id @default(autoincrement())
  name                                                     String                   @unique(map: "name") @db.VarChar(255)
  group_id                                                 Int                      @default(1)
  account_id                                               Int                      @default(0)
  level                                                    Int                      @default(1)
  vocation                                                 Int                      @default(0)
  health                                                   Int                      @default(150)
  healthmax                                                Int                      @default(150)
  experience                                               BigInt                   @default(0) @db.UnsignedBigInt
  lookbody                                                 Int                      @default(0)
  lookfeet                                                 Int                      @default(0)
  lookhead                                                 Int                      @default(0)
  looklegs                                                 Int                      @default(0)
  looktype                                                 Int                      @default(136)
  lookaddons                                               Int                      @default(0)
  direction                                                Int                      @default(2) @db.UnsignedTinyInt
  maglevel                                                 Int                      @default(0)
  mana                                                     Int                      @default(0)
  manamax                                                  Int                      @default(0)
  manaspent                                                BigInt                   @default(0) @db.UnsignedBigInt
  soul                                                     Int                      @default(0) @db.UnsignedInt
  town_id                                                  Int                      @default(1)
  posx                                                     Int                      @default(0)
  posy                                                     Int                      @default(0)
  posz                                                     Int                      @default(0)
  conditions                                               Bytes                    @db.Blob
  cap                                                      Int                      @default(400)
  sex                                                      Int                      @default(0)
  lastlogin                                                BigInt                   @default(0) @db.UnsignedBigInt
  lastip                                                   Int                      @default(0) @db.UnsignedInt
  save                                                     Boolean                  @default(true)
  skull                                                    Boolean                  @default(false)
  skulltime                                                BigInt                   @default(0)
  lastlogout                                               BigInt                   @default(0) @db.UnsignedBigInt
  blessings                                                Int                      @default(0) @db.TinyInt
  onlinetime                                               BigInt                   @default(0)
  deletion                                                 BigInt                   @default(0)
  balance                                                  BigInt                   @default(0) @db.UnsignedBigInt
  offlinetraining_time                                     Int                      @default(43200) @db.UnsignedSmallInt
  offlinetraining_skill                                    Int                      @default(-1)
  stamina                                                  Int                      @default(400) @db.UnsignedSmallInt
  skill_fist                                               Int                      @default(0) @db.UnsignedInt
  skill_fist_tries                                         BigInt                   @default(0) @db.UnsignedBigInt
  skill_club                                               Int                      @default(10) @db.UnsignedInt
  skill_club_tries                                         BigInt                   @default(0) @db.UnsignedBigInt
  skill_sword                                              Int                      @default(0) @db.UnsignedInt
  skill_sword_tries                                        BigInt                   @default(0) @db.UnsignedBigInt
  skill_axe                                                Int                      @default(0) @db.UnsignedInt
  skill_axe_tries                                          BigInt                   @default(0) @db.UnsignedBigInt
  skill_dist                                               Int                      @default(0) @db.UnsignedInt
  skill_dist_tries                                         BigInt                   @default(0) @db.UnsignedBigInt
  skill_shielding                                          Int                      @default(0) @db.UnsignedInt
  skill_shielding_tries                                    BigInt                   @default(0) @db.UnsignedBigInt
  skill_fishing                                            Int                      @default(0) @db.UnsignedInt
  skill_fishing_tries                                      BigInt                   @default(0) @db.UnsignedBigInt
  stat_str                                                 Int                      @default(0) @db.UnsignedTinyInt
  stat_int                                                 Int                      @default(0) @db.UnsignedTinyInt
  stat_dex                                                 Int                      @default(0) @db.UnsignedTinyInt
  stat_vit                                                 Int                      @default(0) @db.UnsignedTinyInt
  stat_spr                                                 Int                      @default(0) @db.UnsignedTinyInt
  stat_wis                                                 Int                      @default(0) @db.UnsignedTinyInt
  account_ban_history                                      account_ban_history[]
  account_bans                                             account_bans[]
  account_viplist                                          account_viplist[]
  guild_invites                                            guild_invites[]
  guild_membership                                         guild_membership?
  guilds                                                   guilds?
  ip_bans                                                  ip_bans[]
  market_history                                           market_history[]
  market_offers                                            market_offers[]
  player_deaths                                            player_deaths[]          @ignore
  player_depotitems                                        player_depotitems[]
  player_inboxitems                                        player_inboxitems[]
  player_items                                             player_items[]           @ignore
  player_namelocks_player_namelocks_player_idToplayers     player_namelocks?        @relation("player_namelocks_player_idToplayers")
  player_namelocks_player_namelocks_namelocked_byToplayers player_namelocks[]       @relation("player_namelocks_namelocked_byToplayers")
  player_spells                                            player_spells[]          @ignore
  player_storage                                           player_storage[]
  player_storeinboxitems                                   player_storeinboxitems[]
  accounts                                                 Account                  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "players_ibfk_1")

  @@index([account_id], map: "account_id")
  @@index([vocation], map: "vocation")
  @@map("players")
}

model House {
  id             Int           @id @default(autoincrement())
  owner          Int
  paid           Int           @default(0) @db.UnsignedInt
  warnings       Int           @default(0)
  name           String        @db.VarChar(255)
  rent           Int           @default(0)
  town_id        Int           @default(0)
  bid            Int           @default(0)
  bid_end        Int           @default(0)
  last_bid       Int           @default(0)
  highest_bidder Int           @default(0)
  size           Int           @default(0)
  beds           Int           @default(0)
  land_zone      String        @default("0") @db.VarChar(255)
  land_plot      String        @default("0") @db.VarChar(255)
  bioma          String        @default("0") @db.VarChar(255)
  land_size      String        @default("0") @db.VarChar(255)
  plant          String        @default("0") @db.VarChar(255)
  harvest        String        @default("0") @db.VarChar(255)
  mining         String        @default("0") @db.VarChar(255)
  livestock      String        @default("0") @db.VarChar(255)
  fishing_boat   String        @default("0") @db.VarChar(255)
  json_data      Json?
  enable         Boolean       @default(false)
  house_lists    house_lists[] @ignore
  tile_store     tile_store[]  @ignore

  @@index([owner], map: "owner")
  @@index([town_id], map: "town_id")
  @@map("houses")
}

model account_ban_history {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  account_id Int
  reason     String  @db.VarChar(255)
  banned_at  BigInt
  expired_at BigInt
  banned_by  Int
  accounts   Account @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_ban_history_ibfk_1")
  players    Player  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_ban_history_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([banned_by], map: "banned_by")
}

model account_bans {
  account_id Int     @id
  reason     String  @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  accounts   Account @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_ibfk_1")
  players    Player  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_ibfk_2")

  @@index([banned_by], map: "banned_by")
}

model account_storage {
  account_id Int
  key        Int     @db.UnsignedInt
  value      Int
  accounts   Account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_storage_ibfk_1")

  @@id([account_id, key])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account_viplist {
  account_id  Int
  player_id   Int
  description String  @default("") @db.VarChar(128)
  icon        Int     @default(0) @db.UnsignedTinyInt
  notify      Boolean @default(false)
  accounts    Account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_viplist_ibfk_1")
  players     Player  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_viplist_ibfk_2")

  @@unique([account_id, player_id], map: "account_player_index")
  @@index([player_id], map: "player_id")
}

model guild_invites {
  player_id Int    @default(0)
  guild_id  Int    @default(0)
  players   Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_invites_ibfk_1")
  guilds    guilds @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_invites_ibfk_2")

  @@id([player_id, guild_id])
  @@index([guild_id], map: "guild_id")
}

model guild_membership {
  player_id   Int         @id
  guild_id    Int
  rank_id     Int
  nick        String      @default("") @db.VarChar(15)
  players     Player      @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_1")
  guilds      guilds      @relation(fields: [guild_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_2")
  guild_ranks guild_ranks @relation(fields: [rank_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_3")

  @@index([guild_id], map: "guild_id")
  @@index([rank_id], map: "rank_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model guild_ranks {
  id               Int                @id @default(autoincrement())
  guild_id         Int
  name             String             @db.VarChar(255)
  level            Int
  guild_membership guild_membership[]
  guilds           guilds             @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_ranks_ibfk_1")

  @@index([guild_id], map: "guild_id")
}

model guild_wars {
  id             Int              @id @default(autoincrement())
  guild1         Int              @default(0)
  guild2         Int              @default(0)
  name1          String           @db.VarChar(255)
  name2          String           @db.VarChar(255)
  status         Int              @default(0) @db.TinyInt
  started        BigInt           @default(0)
  ended          BigInt           @default(0)
  guildwar_kills guildwar_kills[]

  @@index([guild1], map: "guild1")
  @@index([guild2], map: "guild2")
}

model guilds {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "name") @db.VarChar(255)
  ownerid          Int                @unique(map: "ownerid")
  creationdata     Int
  motd             String             @default("") @db.VarChar(255)
  guild_invites    guild_invites[]
  guild_membership guild_membership[]
  guild_ranks      guild_ranks[]
  players          Player             @relation(fields: [ownerid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guilds_ibfk_1")
}

model guildwar_kills {
  id          Int        @id @default(autoincrement())
  killer      String     @db.VarChar(50)
  target      String     @db.VarChar(50)
  killerguild Int        @default(0)
  targetguild Int        @default(0)
  warid       Int        @default(0)
  time        BigInt
  guild_wars  guild_wars @relation(fields: [warid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guildwar_kills_ibfk_1")

  @@index([warid], map: "warid")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model house_lists {
  house_id Int
  listid   Int
  list     String @db.Text
  houses   House  @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "house_lists_ibfk_1")

  @@index([house_id], map: "house_id")
  @@ignore
}

model ip_bans {
  ip         Int    @id @db.UnsignedInt
  reason     String @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  players    Player @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "ip_bans_ibfk_1")

  @@index([banned_by], map: "banned_by")
}

model market_history {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  player_id  Int
  sale       Boolean @default(false)
  itemtype   Int     @db.UnsignedSmallInt
  amount     Int     @db.UnsignedSmallInt
  price      Int     @default(0) @db.UnsignedInt
  expires_at BigInt  @db.UnsignedBigInt
  inserted   BigInt  @db.UnsignedBigInt
  state      Int     @db.UnsignedTinyInt
  players    Player  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "market_history_ibfk_1")

  @@index([player_id, sale], map: "player_id")
}

model market_offers {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  player_id Int
  sale      Boolean @default(false)
  itemtype  Int     @db.UnsignedSmallInt
  amount    Int     @db.UnsignedSmallInt
  created   BigInt  @db.UnsignedBigInt
  anonymous Boolean @default(false)
  price     Int     @default(0) @db.UnsignedInt
  players   Player  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "market_offers_ibfk_1")

  @@index([created], map: "created")
  @@index([player_id], map: "player_id")
  @@index([sale, itemtype], map: "sale")
}

model pets {
  id              Int     @id
  type            Int
  rank            Int
  stage           Int
  name            String  @db.VarChar(22)
  pet             String  @db.VarChar(22)
  owner           String  @db.VarChar(22)
  level           Int
  experience      Int
  addonItem       Int
  strength        Int
  wisdom          Int
  agility         Int
  sustain         Int
  magicResistance Int
  lucky           Int
  hungry          Int
  hygiene         Int     @default(100)
  happiness       Int
  health          BigInt
  cooldowns       String  @db.Text
  world_id        Boolean @default(false)
  wallet          String  @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_deaths {
  player_id              Int
  time                   BigInt  @default(0) @db.UnsignedBigInt
  level                  Int     @default(1)
  killed_by              String  @db.VarChar(255)
  is_player              Boolean @default(true)
  mostdamage_by          String  @db.VarChar(100)
  mostdamage_is_player   Boolean @default(false)
  unjustified            Boolean @default(false)
  mostdamage_unjustified Boolean @default(false)
  players                Player  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_deaths_ibfk_1")

  @@index([killed_by], map: "killed_by")
  @@index([mostdamage_by], map: "mostdamage_by")
  @@index([player_id], map: "player_id")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model player_depotitems {
  player_id  Int
  sid        Int
  pid        Int    @default(0)
  itemtype   Int    @db.UnsignedSmallInt
  count      Int    @default(0) @db.SmallInt
  attributes Bytes  @db.Blob
  json_data  Json?
  players    Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_depotitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

model player_inboxitems {
  player_id  Int
  sid        Int
  pid        Int    @default(0)
  itemtype   Int    @db.UnsignedSmallInt
  count      Int    @default(0) @db.SmallInt
  attributes Bytes  @db.Blob
  json_data  Json?
  players    Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_inboxitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_items {
  player_id  Int    @default(0)
  pid        Int    @default(0)
  sid        Int    @default(0)
  itemtype   Int    @db.UnsignedSmallInt
  count      Int    @default(0) @db.SmallInt
  attributes Bytes  @db.Blob
  json_data  Json?
  players    Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_items_ibfk_1")

  @@index([player_id], map: "player_id")
  @@index([sid], map: "sid")
  @@ignore
}

model player_namelocks {
  player_id                                       Int    @id
  reason                                          String @db.VarChar(255)
  namelocked_at                                   BigInt
  namelocked_by                                   Int
  players_player_namelocks_player_idToplayers     Player @relation("player_namelocks_player_idToplayers", fields: [player_id], references: [id], onDelete: Cascade, map: "player_namelocks_ibfk_1")
  players_player_namelocks_namelocked_byToplayers Player @relation("player_namelocks_namelocked_byToplayers", fields: [namelocked_by], references: [id], onDelete: Cascade, map: "player_namelocks_ibfk_2")

  @@index([namelocked_by], map: "namelocked_by")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_spells {
  player_id Int
  name      String @db.VarChar(255)
  players   Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_spells_ibfk_1")

  @@index([player_id], map: "player_id")
  @@ignore
}

model player_storage {
  player_id Int    @default(0)
  key       Int    @default(0) @db.UnsignedInt
  value     Int    @default(0)
  players   Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_storage_ibfk_1")

  @@id([player_id, key])
}

model player_storeinboxitems {
  player_id  Int
  sid        Int
  pid        Int    @default(0)
  itemtype   Int    @db.UnsignedSmallInt
  count      Int    @default(0) @db.SmallInt
  attributes Bytes
  json_data  Json?
  players    Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_storeinboxitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

model players_online {
  player_id Int @id
}

model server_config {
  config String @id @db.VarChar(50)
  value  String @default("") @db.VarChar(256)
}

model shop_history {
  id      Int      @id @default(autoincrement())
  account Int
  player  Int
  date    DateTime @db.DateTime(0)
  title   String   @db.VarChar(100)
  cost    Int
  details String   @db.VarChar(500)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tile_store {
  house_id  Int
  data      Bytes
  json_data Json?
  houses    House @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tile_store_ibfk_1")

  @@index([house_id], map: "house_id")
  @@ignore
}

model towns {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "name") @db.VarChar(255)
  posx Int    @default(0)
  posy Int    @default(0)
  posz Int    @default(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model znote {
  id        Int    @id @default(autoincrement())
  version   String @db.VarChar(30)
  installed Int
  cached    Int?
}

model znote_accounts {
  id           Int     @id @default(autoincrement())
  account_id   Int
  ip           BigInt  @db.UnsignedBigInt
  created      Int
  points       Int?    @default(0)
  cooldown     Int?    @default(0)
  active       Int     @default(0) @db.TinyInt
  active_email Int     @default(0) @db.TinyInt
  activekey    Int     @default(0)
  flag         String  @db.VarChar(20)
  secret       String? @db.Char(16)
}

model znote_auction_player {
  id                  Int @id @default(autoincrement())
  player_id           Int
  original_account_id Int
  bidder_account_id   Int
  time_begin          Int
  time_end            Int
  price               Int
  bid                 Int
  deposit             Int
  sold                Int @db.TinyInt
  claimed             Int @db.TinyInt
}

model znote_changelog {
  id        Int    @id @default(autoincrement())
  text      String @db.VarChar(255)
  time      Int
  report_id Int
  status    Int    @default(0) @db.TinyInt
}

model znote_deleted_characters {
  id                  Int      @id @default(autoincrement())
  original_account_id Int
  character_name      String   @db.VarChar(255)
  time                DateTime @db.DateTime(0)
  done                Int      @db.TinyInt
}

model znote_forum {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  access   Int    @db.TinyInt
  closed   Int    @db.TinyInt
  hidden   Int    @db.TinyInt
  guild_id Int
}

model znote_forum_posts {
  id          Int    @id @default(autoincrement())
  thread_id   Int
  player_id   Int
  player_name String @db.VarChar(50)
  text        String @db.Text
  created     Int
  updated     Int
}

model znote_forum_threads {
  id          Int    @id @default(autoincrement())
  forum_id    Int
  player_id   Int
  player_name String @db.VarChar(50)
  title       String @db.VarChar(50)
  text        String @db.Text
  created     Int
  updated     Int
  sticky      Int    @db.TinyInt
  hidden      Int    @db.TinyInt
  closed      Int    @db.TinyInt
}

model znote_global_storage {
  key   String @unique(map: "key") @db.VarChar(32)
  value String @db.Text
}

model znote_guild_wars {
  id    Int @id @default(autoincrement())
  limit Int @default(0)
}

model znote_images {
  id         Int    @id @default(autoincrement())
  title      String @db.VarChar(30)
  desc       String @db.Text
  date       Int
  status     Int
  image      String @db.VarChar(50)
  delhash    String @db.VarChar(30)
  account_id Int
}

model znote_news {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(30)
  text  String @db.Text
  date  Int
  pid   Int
}

model znote_paygol {
  id         Int    @id @default(autoincrement())
  account_id Int
  price      Int
  points     Int
  message_id String @db.VarChar(255)
  service_id String @db.VarChar(255)
  shortcode  String @db.VarChar(255)
  keyword    String @db.VarChar(255)
  message    String @db.VarChar(255)
  sender     String @db.VarChar(255)
  operator   String @db.VarChar(255)
  country    String @db.VarChar(255)
  currency   String @db.VarChar(255)
}

model znote_paypal {
  id     Int    @id @default(autoincrement())
  txn_id String @db.VarChar(30)
  email  String @db.VarChar(255)
  accid  Int
  price  Int
  points Int
}

model znote_player_reports {
  id                 Int    @id @default(autoincrement())
  name               String @db.VarChar(50)
  posx               Int
  posy               Int
  posz               Int
  report_description String @db.VarChar(255)
  date               Int
  status             Int    @default(0) @db.TinyInt
}

model znote_players {
  id        Int    @id @default(autoincrement())
  player_id Int
  created   Int
  hide_char Int    @db.TinyInt
  comment   String @db.VarChar(255)
}

model znote_shop {
  id          Int    @id @default(autoincrement())
  type        Int
  itemid      Int?
  count       Int    @default(1)
  description String @db.VarChar(255)
  points      Int    @default(10)
}

model znote_shop_logs {
  id         Int @id @default(autoincrement())
  account_id Int
  player_id  Int
  type       Int
  itemid     Int
  count      Int
  points     Int
  time       Int
}

model znote_shop_orders {
  id         Int @id @default(autoincrement())
  account_id Int
  type       Int
  itemid     Int
  count      Int
  time       Int @default(0)
}

model znote_tickets {
  id       Int    @id @default(autoincrement())
  owner    Int
  username String @db.VarChar(32)
  subject  String @db.Text
  message  String @db.Text
  ip       BigInt
  creation Int
  status   String @db.VarChar(20)
}

model znote_tickets_replies {
  id       Int    @id @default(autoincrement())
  tid      Int
  username String @db.VarChar(32)
  message  String @db.Text
  created  Int
}

model znote_visitors {
  id    Int    @id @default(autoincrement())
  ip    BigInt
  value Int
}

model znote_visitors_details {
  id         Int    @id @default(autoincrement())
  ip         BigInt
  time       Int
  type       Int    @db.TinyInt
  account_id Int
}
