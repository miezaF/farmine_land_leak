
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  password: 'password',
  secret: 'secret',
  type: 'type',
  premium_ends_at: 'premium_ends_at',
  email: 'email',
  creation: 'creation',
  premium_points: 'premium_points',
  premdays: 'premdays',
  wallet: 'wallet',
  alpha_key: 'alpha_key'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  group_id: 'group_id',
  account_id: 'account_id',
  level: 'level',
  vocation: 'vocation',
  health: 'health',
  healthmax: 'healthmax',
  experience: 'experience',
  lookbody: 'lookbody',
  lookfeet: 'lookfeet',
  lookhead: 'lookhead',
  looklegs: 'looklegs',
  looktype: 'looktype',
  lookaddons: 'lookaddons',
  direction: 'direction',
  maglevel: 'maglevel',
  mana: 'mana',
  manamax: 'manamax',
  manaspent: 'manaspent',
  soul: 'soul',
  town_id: 'town_id',
  posx: 'posx',
  posy: 'posy',
  posz: 'posz',
  conditions: 'conditions',
  cap: 'cap',
  sex: 'sex',
  lastlogin: 'lastlogin',
  lastip: 'lastip',
  save: 'save',
  skull: 'skull',
  skulltime: 'skulltime',
  lastlogout: 'lastlogout',
  blessings: 'blessings',
  onlinetime: 'onlinetime',
  deletion: 'deletion',
  balance: 'balance',
  offlinetraining_time: 'offlinetraining_time',
  offlinetraining_skill: 'offlinetraining_skill',
  stamina: 'stamina',
  skill_fist: 'skill_fist',
  skill_fist_tries: 'skill_fist_tries',
  skill_club: 'skill_club',
  skill_club_tries: 'skill_club_tries',
  skill_sword: 'skill_sword',
  skill_sword_tries: 'skill_sword_tries',
  skill_axe: 'skill_axe',
  skill_axe_tries: 'skill_axe_tries',
  skill_dist: 'skill_dist',
  skill_dist_tries: 'skill_dist_tries',
  skill_shielding: 'skill_shielding',
  skill_shielding_tries: 'skill_shielding_tries',
  skill_fishing: 'skill_fishing',
  skill_fishing_tries: 'skill_fishing_tries',
  stat_str: 'stat_str',
  stat_int: 'stat_int',
  stat_dex: 'stat_dex',
  stat_vit: 'stat_vit',
  stat_spr: 'stat_spr',
  stat_wis: 'stat_wis'
};

exports.Prisma.HouseScalarFieldEnum = {
  id: 'id',
  owner: 'owner',
  paid: 'paid',
  warnings: 'warnings',
  name: 'name',
  rent: 'rent',
  town_id: 'town_id',
  bid: 'bid',
  bid_end: 'bid_end',
  last_bid: 'last_bid',
  highest_bidder: 'highest_bidder',
  size: 'size',
  beds: 'beds',
  land_zone: 'land_zone',
  land_plot: 'land_plot',
  bioma: 'bioma',
  land_size: 'land_size',
  plant: 'plant',
  harvest: 'harvest',
  mining: 'mining',
  livestock: 'livestock',
  fishing_boat: 'fishing_boat',
  json_data: 'json_data',
  enable: 'enable'
};

exports.Prisma.Account_ban_historyScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  reason: 'reason',
  banned_at: 'banned_at',
  expired_at: 'expired_at',
  banned_by: 'banned_by'
};

exports.Prisma.Account_bansScalarFieldEnum = {
  account_id: 'account_id',
  reason: 'reason',
  banned_at: 'banned_at',
  expires_at: 'expires_at',
  banned_by: 'banned_by'
};

exports.Prisma.Account_storageScalarFieldEnum = {
  account_id: 'account_id',
  key: 'key',
  value: 'value'
};

exports.Prisma.Account_viplistScalarFieldEnum = {
  account_id: 'account_id',
  player_id: 'player_id',
  description: 'description',
  icon: 'icon',
  notify: 'notify'
};

exports.Prisma.Guild_invitesScalarFieldEnum = {
  player_id: 'player_id',
  guild_id: 'guild_id'
};

exports.Prisma.Guild_membershipScalarFieldEnum = {
  player_id: 'player_id',
  guild_id: 'guild_id',
  rank_id: 'rank_id',
  nick: 'nick'
};

exports.Prisma.Guild_ranksScalarFieldEnum = {
  id: 'id',
  guild_id: 'guild_id',
  name: 'name',
  level: 'level'
};

exports.Prisma.Guild_warsScalarFieldEnum = {
  id: 'id',
  guild1: 'guild1',
  guild2: 'guild2',
  name1: 'name1',
  name2: 'name2',
  status: 'status',
  started: 'started',
  ended: 'ended'
};

exports.Prisma.GuildsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ownerid: 'ownerid',
  creationdata: 'creationdata',
  motd: 'motd'
};

exports.Prisma.Guildwar_killsScalarFieldEnum = {
  id: 'id',
  killer: 'killer',
  target: 'target',
  killerguild: 'killerguild',
  targetguild: 'targetguild',
  warid: 'warid',
  time: 'time'
};

exports.Prisma.Ip_bansScalarFieldEnum = {
  ip: 'ip',
  reason: 'reason',
  banned_at: 'banned_at',
  expires_at: 'expires_at',
  banned_by: 'banned_by'
};

exports.Prisma.Market_historyScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  sale: 'sale',
  itemtype: 'itemtype',
  amount: 'amount',
  price: 'price',
  expires_at: 'expires_at',
  inserted: 'inserted',
  state: 'state'
};

exports.Prisma.Market_offersScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  sale: 'sale',
  itemtype: 'itemtype',
  amount: 'amount',
  created: 'created',
  anonymous: 'anonymous',
  price: 'price'
};

exports.Prisma.PetsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  rank: 'rank',
  stage: 'stage',
  name: 'name',
  pet: 'pet',
  owner: 'owner',
  level: 'level',
  experience: 'experience',
  addonItem: 'addonItem',
  strength: 'strength',
  wisdom: 'wisdom',
  agility: 'agility',
  sustain: 'sustain',
  magicResistance: 'magicResistance',
  lucky: 'lucky',
  hungry: 'hungry',
  hygiene: 'hygiene',
  happiness: 'happiness',
  health: 'health',
  cooldowns: 'cooldowns',
  world_id: 'world_id',
  wallet: 'wallet'
};

exports.Prisma.Player_depotitemsScalarFieldEnum = {
  player_id: 'player_id',
  sid: 'sid',
  pid: 'pid',
  itemtype: 'itemtype',
  count: 'count',
  attributes: 'attributes',
  json_data: 'json_data'
};

exports.Prisma.Player_inboxitemsScalarFieldEnum = {
  player_id: 'player_id',
  sid: 'sid',
  pid: 'pid',
  itemtype: 'itemtype',
  count: 'count',
  attributes: 'attributes',
  json_data: 'json_data'
};

exports.Prisma.Player_namelocksScalarFieldEnum = {
  player_id: 'player_id',
  reason: 'reason',
  namelocked_at: 'namelocked_at',
  namelocked_by: 'namelocked_by'
};

exports.Prisma.Player_storageScalarFieldEnum = {
  player_id: 'player_id',
  key: 'key',
  value: 'value'
};

exports.Prisma.Player_storeinboxitemsScalarFieldEnum = {
  player_id: 'player_id',
  sid: 'sid',
  pid: 'pid',
  itemtype: 'itemtype',
  count: 'count',
  attributes: 'attributes',
  json_data: 'json_data'
};

exports.Prisma.Players_onlineScalarFieldEnum = {
  player_id: 'player_id'
};

exports.Prisma.Server_configScalarFieldEnum = {
  config: 'config',
  value: 'value'
};

exports.Prisma.Shop_historyScalarFieldEnum = {
  id: 'id',
  account: 'account',
  player: 'player',
  date: 'date',
  title: 'title',
  cost: 'cost',
  details: 'details'
};

exports.Prisma.TownsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  posx: 'posx',
  posy: 'posy',
  posz: 'posz'
};

exports.Prisma.ZnoteScalarFieldEnum = {
  id: 'id',
  version: 'version',
  installed: 'installed',
  cached: 'cached'
};

exports.Prisma.Znote_accountsScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  ip: 'ip',
  created: 'created',
  points: 'points',
  cooldown: 'cooldown',
  active: 'active',
  active_email: 'active_email',
  activekey: 'activekey',
  flag: 'flag',
  secret: 'secret'
};

exports.Prisma.Znote_auction_playerScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  original_account_id: 'original_account_id',
  bidder_account_id: 'bidder_account_id',
  time_begin: 'time_begin',
  time_end: 'time_end',
  price: 'price',
  bid: 'bid',
  deposit: 'deposit',
  sold: 'sold',
  claimed: 'claimed'
};

exports.Prisma.Znote_changelogScalarFieldEnum = {
  id: 'id',
  text: 'text',
  time: 'time',
  report_id: 'report_id',
  status: 'status'
};

exports.Prisma.Znote_deleted_charactersScalarFieldEnum = {
  id: 'id',
  original_account_id: 'original_account_id',
  character_name: 'character_name',
  time: 'time',
  done: 'done'
};

exports.Prisma.Znote_forumScalarFieldEnum = {
  id: 'id',
  name: 'name',
  access: 'access',
  closed: 'closed',
  hidden: 'hidden',
  guild_id: 'guild_id'
};

exports.Prisma.Znote_forum_postsScalarFieldEnum = {
  id: 'id',
  thread_id: 'thread_id',
  player_id: 'player_id',
  player_name: 'player_name',
  text: 'text',
  created: 'created',
  updated: 'updated'
};

exports.Prisma.Znote_forum_threadsScalarFieldEnum = {
  id: 'id',
  forum_id: 'forum_id',
  player_id: 'player_id',
  player_name: 'player_name',
  title: 'title',
  text: 'text',
  created: 'created',
  updated: 'updated',
  sticky: 'sticky',
  hidden: 'hidden',
  closed: 'closed'
};

exports.Prisma.Znote_global_storageScalarFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.Znote_guild_warsScalarFieldEnum = {
  id: 'id',
  limit: 'limit'
};

exports.Prisma.Znote_imagesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  desc: 'desc',
  date: 'date',
  status: 'status',
  image: 'image',
  delhash: 'delhash',
  account_id: 'account_id'
};

exports.Prisma.Znote_newsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  text: 'text',
  date: 'date',
  pid: 'pid'
};

exports.Prisma.Znote_paygolScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  price: 'price',
  points: 'points',
  message_id: 'message_id',
  service_id: 'service_id',
  shortcode: 'shortcode',
  keyword: 'keyword',
  message: 'message',
  sender: 'sender',
  operator: 'operator',
  country: 'country',
  currency: 'currency'
};

exports.Prisma.Znote_paypalScalarFieldEnum = {
  id: 'id',
  txn_id: 'txn_id',
  email: 'email',
  accid: 'accid',
  price: 'price',
  points: 'points'
};

exports.Prisma.Znote_player_reportsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  posx: 'posx',
  posy: 'posy',
  posz: 'posz',
  report_description: 'report_description',
  date: 'date',
  status: 'status'
};

exports.Prisma.Znote_playersScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  created: 'created',
  hide_char: 'hide_char',
  comment: 'comment'
};

exports.Prisma.Znote_shopScalarFieldEnum = {
  id: 'id',
  type: 'type',
  itemid: 'itemid',
  count: 'count',
  description: 'description',
  points: 'points'
};

exports.Prisma.Znote_shop_logsScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  player_id: 'player_id',
  type: 'type',
  itemid: 'itemid',
  count: 'count',
  points: 'points',
  time: 'time'
};

exports.Prisma.Znote_shop_ordersScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  type: 'type',
  itemid: 'itemid',
  count: 'count',
  time: 'time'
};

exports.Prisma.Znote_ticketsScalarFieldEnum = {
  id: 'id',
  owner: 'owner',
  username: 'username',
  subject: 'subject',
  message: 'message',
  ip: 'ip',
  creation: 'creation',
  status: 'status'
};

exports.Prisma.Znote_tickets_repliesScalarFieldEnum = {
  id: 'id',
  tid: 'tid',
  username: 'username',
  message: 'message',
  created: 'created'
};

exports.Prisma.Znote_visitorsScalarFieldEnum = {
  id: 'id',
  ip: 'ip',
  value: 'value'
};

exports.Prisma.Znote_visitors_detailsScalarFieldEnum = {
  id: 'id',
  ip: 'ip',
  time: 'time',
  type: 'type',
  account_id: 'account_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Account: 'Account',
  Player: 'Player',
  House: 'House',
  account_ban_history: 'account_ban_history',
  account_bans: 'account_bans',
  account_storage: 'account_storage',
  account_viplist: 'account_viplist',
  guild_invites: 'guild_invites',
  guild_membership: 'guild_membership',
  guild_ranks: 'guild_ranks',
  guild_wars: 'guild_wars',
  guilds: 'guilds',
  guildwar_kills: 'guildwar_kills',
  ip_bans: 'ip_bans',
  market_history: 'market_history',
  market_offers: 'market_offers',
  pets: 'pets',
  player_depotitems: 'player_depotitems',
  player_inboxitems: 'player_inboxitems',
  player_namelocks: 'player_namelocks',
  player_storage: 'player_storage',
  player_storeinboxitems: 'player_storeinboxitems',
  players_online: 'players_online',
  server_config: 'server_config',
  shop_history: 'shop_history',
  towns: 'towns',
  znote: 'znote',
  znote_accounts: 'znote_accounts',
  znote_auction_player: 'znote_auction_player',
  znote_changelog: 'znote_changelog',
  znote_deleted_characters: 'znote_deleted_characters',
  znote_forum: 'znote_forum',
  znote_forum_posts: 'znote_forum_posts',
  znote_forum_threads: 'znote_forum_threads',
  znote_global_storage: 'znote_global_storage',
  znote_guild_wars: 'znote_guild_wars',
  znote_images: 'znote_images',
  znote_news: 'znote_news',
  znote_paygol: 'znote_paygol',
  znote_paypal: 'znote_paypal',
  znote_player_reports: 'znote_player_reports',
  znote_players: 'znote_players',
  znote_shop: 'znote_shop',
  znote_shop_logs: 'znote_shop_logs',
  znote_shop_orders: 'znote_shop_orders',
  znote_tickets: 'znote_tickets',
  znote_tickets_replies: 'znote_tickets_replies',
  znote_visitors: 'znote_visitors',
  znote_visitors_details: 'znote_visitors_details'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
