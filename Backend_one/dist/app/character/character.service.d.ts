/// <reference types="node" />
import { CreateCharacterDto } from './dto/create-character.dto';
import { UpdateCharacterDto } from './dto/update-character.dto';
import { PrismaService } from 'src/database/prisma.service';
import { UserService } from '../user/user.service';
export declare class CharacterService {
    private readonly prisma;
    private readonly userService;
    constructor(prisma: PrismaService, userService: UserService);
    findAll(): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        name: string;
        group_id: number;
        account_id: number;
        level: number;
        vocation: number;
        health: number;
        healthmax: number;
        experience: bigint;
        lookbody: number;
        lookfeet: number;
        lookhead: number;
        looklegs: number;
        looktype: number;
        lookaddons: number;
        direction: number;
        maglevel: number;
        mana: number;
        manamax: number;
        manaspent: bigint;
        soul: number;
        town_id: number;
        posx: number;
        posy: number;
        posz: number;
        conditions: Buffer;
        cap: number;
        sex: number;
        lastlogin: bigint;
        lastip: number;
        save: boolean;
        skull: boolean;
        skulltime: bigint;
        lastlogout: bigint;
        blessings: number;
        onlinetime: bigint;
        deletion: bigint;
        balance: bigint;
        offlinetraining_time: number;
        offlinetraining_skill: number;
        stamina: number;
        skill_fist: number;
        skill_fist_tries: bigint;
        skill_club: number;
        skill_club_tries: bigint;
        skill_sword: number;
        skill_sword_tries: bigint;
        skill_axe: number;
        skill_axe_tries: bigint;
        skill_dist: number;
        skill_dist_tries: bigint;
        skill_shielding: number;
        skill_shielding_tries: bigint;
        skill_fishing: number;
        skill_fishing_tries: bigint;
        stat_str: number;
        stat_int: number;
        stat_dex: number;
        stat_vit: number;
        stat_spr: number;
        stat_wis: number;
    }, unknown, never> & {})[]>;
    findAllByUser(id: number): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        name: string;
        group_id: number;
        account_id: number;
        level: number;
        vocation: number;
        health: number;
        healthmax: number;
        experience: bigint;
        lookbody: number;
        lookfeet: number;
        lookhead: number;
        looklegs: number;
        looktype: number;
        lookaddons: number;
        direction: number;
        maglevel: number;
        mana: number;
        manamax: number;
        manaspent: bigint;
        soul: number;
        town_id: number;
        posx: number;
        posy: number;
        posz: number;
        conditions: Buffer;
        cap: number;
        sex: number;
        lastlogin: bigint;
        lastip: number;
        save: boolean;
        skull: boolean;
        skulltime: bigint;
        lastlogout: bigint;
        blessings: number;
        onlinetime: bigint;
        deletion: bigint;
        balance: bigint;
        offlinetraining_time: number;
        offlinetraining_skill: number;
        stamina: number;
        skill_fist: number;
        skill_fist_tries: bigint;
        skill_club: number;
        skill_club_tries: bigint;
        skill_sword: number;
        skill_sword_tries: bigint;
        skill_axe: number;
        skill_axe_tries: bigint;
        skill_dist: number;
        skill_dist_tries: bigint;
        skill_shielding: number;
        skill_shielding_tries: bigint;
        skill_fishing: number;
        skill_fishing_tries: bigint;
        stat_str: number;
        stat_int: number;
        stat_dex: number;
        stat_vit: number;
        stat_spr: number;
        stat_wis: number;
    }, unknown, never> & {})[]>;
    createNew(data: CreateCharacterDto): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        name: string;
        group_id: number;
        account_id: number;
        level: number;
        vocation: number;
        health: number;
        healthmax: number;
        experience: bigint;
        lookbody: number;
        lookfeet: number;
        lookhead: number;
        looklegs: number;
        looktype: number;
        lookaddons: number;
        direction: number;
        maglevel: number;
        mana: number;
        manamax: number;
        manaspent: bigint;
        soul: number;
        town_id: number;
        posx: number;
        posy: number;
        posz: number;
        conditions: Buffer;
        cap: number;
        sex: number;
        lastlogin: bigint;
        lastip: number;
        save: boolean;
        skull: boolean;
        skulltime: bigint;
        lastlogout: bigint;
        blessings: number;
        onlinetime: bigint;
        deletion: bigint;
        balance: bigint;
        offlinetraining_time: number;
        offlinetraining_skill: number;
        stamina: number;
        skill_fist: number;
        skill_fist_tries: bigint;
        skill_club: number;
        skill_club_tries: bigint;
        skill_sword: number;
        skill_sword_tries: bigint;
        skill_axe: number;
        skill_axe_tries: bigint;
        skill_dist: number;
        skill_dist_tries: bigint;
        skill_shielding: number;
        skill_shielding_tries: bigint;
        skill_fishing: number;
        skill_fishing_tries: bigint;
        stat_str: number;
        stat_int: number;
        stat_dex: number;
        stat_vit: number;
        stat_spr: number;
        stat_wis: number;
    }, unknown, never> & {}>;
    findOneById(id: number): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        name: string;
        group_id: number;
        account_id: number;
        level: number;
        vocation: number;
        health: number;
        healthmax: number;
        experience: bigint;
        lookbody: number;
        lookfeet: number;
        lookhead: number;
        looklegs: number;
        looktype: number;
        lookaddons: number;
        direction: number;
        maglevel: number;
        mana: number;
        manamax: number;
        manaspent: bigint;
        soul: number;
        town_id: number;
        posx: number;
        posy: number;
        posz: number;
        conditions: Buffer;
        cap: number;
        sex: number;
        lastlogin: bigint;
        lastip: number;
        save: boolean;
        skull: boolean;
        skulltime: bigint;
        lastlogout: bigint;
        blessings: number;
        onlinetime: bigint;
        deletion: bigint;
        balance: bigint;
        offlinetraining_time: number;
        offlinetraining_skill: number;
        stamina: number;
        skill_fist: number;
        skill_fist_tries: bigint;
        skill_club: number;
        skill_club_tries: bigint;
        skill_sword: number;
        skill_sword_tries: bigint;
        skill_axe: number;
        skill_axe_tries: bigint;
        skill_dist: number;
        skill_dist_tries: bigint;
        skill_shielding: number;
        skill_shielding_tries: bigint;
        skill_fishing: number;
        skill_fishing_tries: bigint;
        stat_str: number;
        stat_int: number;
        stat_dex: number;
        stat_vit: number;
        stat_spr: number;
        stat_wis: number;
    }, unknown, never> & {}>;
    updateById(id: number, data: Partial<UpdateCharacterDto>): Promise<void>;
    deleteById(id: number): Promise<void>;
}
